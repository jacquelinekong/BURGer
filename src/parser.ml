type token =
  | ID of (string)
  | STRINGLIT of (string)
  | INTLIT of (int)
  | LPAREN
  | RPAREN
  | SEMI
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NEG
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | IF
  | ELSE
  | NOELSE
  | TRUE
  | FALSE
  | INT
  | CHAR
  | STRING
  | BOOL
  | NULL
  | FOR
  | WHILE
  | DEF
  | RETURN
  | EOF

open Parsing;;
let _ = parse_error;;
# 9 "parser.mly"
 open Ast 
# 49 "parser.ml"
let yytransl_const = [|
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* SEMI *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* LBRACK *);
  266 (* RBRACK *);
  267 (* COMMA *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* ASSIGN *);
  273 (* NEG *);
  274 (* LT *);
  275 (* GT *);
  276 (* LEQ *);
  277 (* GEQ *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* AND *);
  281 (* OR *);
  282 (* NOT *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* NOELSE *);
  286 (* TRUE *);
  287 (* FALSE *);
  288 (* INT *);
  289 (* CHAR *);
  290 (* STRING *);
  291 (* BOOL *);
  292 (* NULL *);
  293 (* FOR *);
  294 (* WHILE *);
  295 (* DEF *);
  296 (* RETURN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* STRINGLIT *);
  259 (* INTLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\006\000\006\000\006\000\
\006\000\006\000\006\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\009\000\009\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\011\000\011\000\
\008\000\008\000\005\000\012\000\012\000\013\000\013\000\010\000\
\010\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\002\000\002\000\003\000\002\000\003\000\
\005\000\007\000\009\000\005\000\001\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\004\000\003\000\004\000\003\000\000\000\002\000\
\002\000\004\000\009\000\000\000\001\000\002\000\004\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\060\000\000\000\000\000\042\000\038\000\000\000\
\000\000\047\000\000\000\000\000\000\000\039\000\040\000\006\000\
\008\000\009\000\007\000\010\000\000\000\000\000\000\000\000\000\
\001\000\003\000\004\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\044\000\016\000\022\000\046\000\000\000\
\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\028\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\055\000\019\000\
\051\000"

let yydgoto = "\002\000\
\003\000\004\000\026\000\036\000\028\000\029\000\030\000\031\000\
\037\000\064\000\038\000\106\000\107\000\065\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\041\000\004\255\000\000\000\000\114\001\
\173\255\000\000\114\001\114\001\019\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\255\036\255\073\255\008\255\
\000\000\000\000\000\000\000\000\006\255\217\001\013\255\114\001\
\114\001\114\001\134\001\000\000\093\255\078\001\000\000\000\000\
\114\001\114\001\114\001\015\255\000\000\237\001\050\255\114\001\
\000\000\114\001\114\001\114\001\114\001\114\001\114\001\114\001\
\114\001\114\001\114\001\114\001\114\001\000\000\067\002\038\255\
\047\255\037\002\067\002\000\000\000\000\000\000\000\000\067\002\
\155\001\001\002\176\001\069\255\000\000\114\001\053\002\042\255\
\042\255\000\000\000\000\103\255\103\255\103\255\103\255\042\000\
\042\000\174\255\134\255\000\000\114\001\000\000\173\255\114\001\
\173\255\073\255\067\002\000\000\067\002\046\255\021\002\000\000\
\020\255\072\255\068\255\173\255\114\001\000\000\078\255\073\255\
\000\000\197\001\173\255\021\255\173\255\133\255\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\213\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\092\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\255\000\000\
\094\255\000\000\060\001\000\000\000\000\000\000\000\000\096\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\112\000\000\000\000\000\143\000\174\000\205\000\236\000\058\255\
\245\255\011\001\042\001\000\000\000\000\000\000\000\000\000\000\
\000\000\106\255\115\255\000\000\065\255\001\000\000\000\000\000\
\000\000\000\000\107\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\252\255\000\000\236\255\250\255\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 860
let yytable = "\027\000\
\017\000\035\000\044\000\001\000\039\000\040\000\047\000\032\000\
\005\000\006\000\007\000\008\000\033\000\045\000\048\000\076\000\
\010\000\046\000\062\000\034\000\110\000\119\000\041\000\048\000\
\011\000\063\000\066\000\067\000\048\000\048\000\042\000\072\000\
\070\000\012\000\073\000\074\000\075\000\014\000\015\000\043\000\
\025\000\079\000\092\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\052\000\
\053\000\093\000\030\000\030\000\030\000\030\000\030\000\030\000\
\058\000\078\000\030\000\030\000\030\000\059\000\058\000\099\000\
\098\000\108\000\030\000\059\000\111\000\105\000\112\000\030\000\
\030\000\030\000\030\000\030\000\115\000\056\000\101\000\030\000\
\030\000\103\000\102\000\116\000\104\000\005\000\006\000\007\000\
\008\000\049\000\057\000\009\000\069\000\010\000\114\000\113\000\
\016\000\017\000\018\000\019\000\020\000\011\000\052\000\053\000\
\120\000\070\000\050\000\051\000\052\000\053\000\012\000\013\000\
\050\000\118\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\024\000\005\000\006\000\007\000\
\008\000\000\000\000\000\009\000\121\000\010\000\000\000\000\000\
\000\000\050\000\051\000\052\000\053\000\011\000\000\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\012\000\013\000\
\000\000\000\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\024\000\005\000\006\000\007\000\
\008\000\000\000\000\000\009\000\000\000\010\000\000\000\000\000\
\000\000\050\000\051\000\052\000\053\000\011\000\000\000\054\000\
\055\000\056\000\057\000\058\000\059\000\000\000\012\000\013\000\
\000\000\000\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\024\000\041\000\041\000\041\000\
\000\000\041\000\041\000\000\000\000\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
\000\000\000\000\041\000\041\000\000\000\031\000\031\000\031\000\
\031\000\031\000\031\000\000\000\000\000\031\000\031\000\031\000\
\000\000\017\000\017\000\017\000\017\000\031\000\000\000\017\000\
\017\000\017\000\031\000\031\000\031\000\031\000\031\000\000\000\
\000\000\017\000\031\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\017\000\000\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\005\000\006\000\007\000\008\000\000\000\000\000\009\000\
\000\000\010\000\000\000\000\000\000\000\050\000\051\000\052\000\
\053\000\011\000\000\000\054\000\055\000\056\000\057\000\000\000\
\000\000\000\000\012\000\013\000\000\000\000\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\000\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
\000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\000\000\000\000\026\000\026\000\
\027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
\027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\000\000\000\000\027\000\027\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\000\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\000\000\000\000\000\000\032\000\032\000\034\000\034\000\
\034\000\034\000\034\000\034\000\000\000\000\000\034\000\034\000\
\034\000\000\000\000\000\000\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\000\000\000\000\000\000\034\000\034\000\033\000\033\000\033\000\
\033\000\033\000\033\000\000\000\000\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\000\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
\000\000\000\000\033\000\033\000\035\000\035\000\035\000\035\000\
\035\000\035\000\000\000\000\000\035\000\035\000\035\000\000\000\
\000\000\000\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\000\000\000\000\
\000\000\035\000\035\000\036\000\036\000\036\000\036\000\036\000\
\036\000\000\000\000\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\036\000\036\000\000\000\000\000\000\000\
\036\000\036\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\000\000\037\000\037\000\037\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\025\000\025\000\025\000\025\000\
\025\000\025\000\037\000\037\000\025\000\025\000\025\000\037\000\
\037\000\000\000\000\000\000\000\025\000\000\000\005\000\006\000\
\007\000\008\000\000\000\000\000\000\000\025\000\010\000\071\000\
\000\000\025\000\025\000\000\000\000\000\000\000\011\000\000\000\
\048\000\048\000\048\000\048\000\000\000\000\000\000\000\012\000\
\048\000\048\000\000\000\014\000\015\000\000\000\000\000\000\000\
\048\000\000\000\005\000\006\000\007\000\008\000\000\000\000\000\
\000\000\048\000\010\000\000\000\000\000\048\000\048\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\012\000\000\000\000\000\000\000\014\000\
\015\000\050\000\051\000\052\000\053\000\000\000\000\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\051\000\
\052\000\053\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\097\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\051\000\052\000\053\000\000\000\
\000\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\117\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\049\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\000\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\077\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\096\000\000\000\
\000\000\000\000\000\000\000\000\050\000\051\000\052\000\053\000\
\000\000\000\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\109\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\052\000\053\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\094\000\000\000\
\050\000\051\000\052\000\053\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\100\000\000\000\
\050\000\051\000\052\000\053\000\000\000\000\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\050\000\051\000\
\052\000\053\000\000\000\000\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000"

let yycheck = "\004\000\
\000\000\008\000\023\000\001\000\011\000\012\000\001\001\004\001\
\001\001\002\001\003\001\004\001\009\001\006\001\009\001\001\001\
\009\001\024\000\006\001\016\001\001\001\001\001\004\001\009\001\
\017\001\032\000\033\000\034\000\009\001\009\001\004\001\038\000\
\037\000\026\001\041\000\042\000\043\000\030\001\031\001\004\001\
\000\000\048\000\005\001\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\014\001\
\015\001\011\001\001\001\002\001\003\001\004\001\005\001\006\001\
\005\001\016\001\009\001\010\001\011\001\005\001\011\001\078\000\
\004\001\028\001\017\001\011\001\005\001\098\000\011\001\022\001\
\023\001\024\001\025\001\026\001\007\001\005\001\093\000\030\001\
\031\001\096\000\095\000\112\000\097\000\001\001\002\001\003\001\
\004\001\006\001\005\001\007\001\008\001\009\001\109\000\108\000\
\032\001\033\001\034\001\035\001\036\001\017\001\005\001\005\001\
\117\000\118\000\012\001\013\001\014\001\015\001\026\001\027\001\
\006\001\115\000\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\008\001\009\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\017\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\026\001\027\001\
\255\255\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\255\255\009\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\017\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\026\001\027\001\
\255\255\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\001\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\030\001\031\001\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\009\001\010\001\011\001\
\255\255\001\001\002\001\003\001\004\001\017\001\255\255\007\001\
\008\001\009\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\017\001\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\001\001\002\001\003\001\004\001\255\255\255\255\007\001\
\255\255\009\001\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\017\001\255\255\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\031\001\
\001\001\002\001\003\001\004\001\005\001\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\030\001\031\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\255\255\030\001\031\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\255\255\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\030\001\031\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\030\001\031\001\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\255\255\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\255\255\030\001\031\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\026\001\255\255\255\255\255\255\
\030\001\031\001\001\001\002\001\003\001\004\001\005\001\006\001\
\255\255\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\025\001\026\001\009\001\010\001\011\001\030\001\
\031\001\255\255\255\255\255\255\017\001\255\255\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\026\001\009\001\010\001\
\255\255\030\001\031\001\255\255\255\255\255\255\017\001\255\255\
\001\001\002\001\003\001\004\001\255\255\255\255\255\255\026\001\
\009\001\010\001\255\255\030\001\031\001\255\255\255\255\255\255\
\017\001\255\255\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\026\001\009\001\255\255\255\255\030\001\031\001\255\255\
\255\255\255\255\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\005\001\026\001\255\255\255\255\255\255\030\001\
\031\001\012\001\013\001\014\001\015\001\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\010\001\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\012\001\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  SEMI\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NEG\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EQ\000\
  NEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  TRUE\000\
  FALSE\000\
  INT\000\
  CHAR\000\
  STRING\000\
  BOOL\000\
  NULL\000\
  FOR\000\
  WHILE\000\
  DEF\000\
  RETURN\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  STRINGLIT\000\
  INTLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'item_list) in
    Obj.repr(
# 44 "parser.mly"
                 ( List.rev _1 )
# 454 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                ( [] )
# 460 "parser.ml"
               : 'item_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'item_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'item) in
    Obj.repr(
# 48 "parser.mly"
                   ( (_2 :: _1) )
# 468 "parser.ml"
               : 'item_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 51 "parser.mly"
              ( Stmt(_1) )
# 475 "parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 52 "parser.mly"
              ( Function(_1) )
# 482 "parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parser.mly"
                           ( Int )
# 488 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                           ( Bool )
# 494 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                           ( Char )
# 500 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                           ( String )
# 506 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                           ( Null )
# 512 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                           ( Array(_1, _3) )
# 520 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                                            ( Expr(_1) )
# 527 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl) in
    Obj.repr(
# 66 "parser.mly"
                                            ( _1 )
# 534 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                                            ( Return(_2) )
# 541 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                                            ( Return(NoExpr) )
# 547 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 69 "parser.mly"
                                            ( Block(List.rev _2) )
# 554 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 70 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 562 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 71 "parser.mly"
                                            ( If(_3, _5, _7) )
# 571 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 73 "parser.mly"
                                            ( For(_3, _5, _7, _9) )
# 581 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                                            ( While(_3, _5) )
# 589 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 78 "parser.mly"
         ( [_1] )
# 596 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                   ( (_2 :: _1) )
# 604 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                                  ( Unop(Neg, _2) )
# 611 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                  ( Unop(Not, _2) )
# 618 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                  ( Assign(_1, _3) )
# 626 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                                  ( Binop(_1, Add,   _3) )
# 634 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                                  ( Binop(_1, Sub,   _3) )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                                  ( Binop(_1, Mult,  _3) )
# 650 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                  ( Binop(_1, Div,   _3) )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                  ( Binop(_1, Equal, _3) )
# 666 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                                  ( Binop(_1, Neq,   _3) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                                  ( Binop(_1, Less,  _3) )
# 682 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                  ( Binop(_1, Leq,   _3) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                  ( Binop(_1, Greater, _3) )
# 698 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                  ( Binop(_1, Geq,   _3) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                  ( Binop(_1, And,   _3) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                  ( Binop(_1, Or,    _3) )
# 722 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 99 "parser.mly"
                                  ( IntLit(_1) )
# 729 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                                  ( BoolLit(true) )
# 735 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                                  ( BoolLit(false) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                                  ( Id(_1) )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                                  ( StringLit(_1) )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                  ( Access(_1, _3) )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                  ( _2 )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 106 "parser.mly"
                                  ( Call(_1, _3) )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 107 "parser.mly"
                                  ( _2 )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                   ( [] )
# 791 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                   ( [] )
# 799 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
           ( VDecl(_1, _2) )
# 807 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                       ( VAssign((_1, _2), _4))
# 816 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 125 "parser.mly"
    ( { typ = _2;
        fname = _3;
        formals = _5;
        body = List.rev _8;
      } )
# 830 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                  ( [] )
# 836 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 133 "parser.mly"
                  ( List.rev _1 )
# 843 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "parser.mly"
                             ( [(_1,_2)] )
# 851 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "parser.mly"
                             ( (_3,_4) :: _1 )
# 860 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                  ( [] )
# 866 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 141 "parser.mly"
                  ( List.rev _1 )
# 873 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                            ( [_1] )
# 880 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                            ( _3 :: _1 )
# 888 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
